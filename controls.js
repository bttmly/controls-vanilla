// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  (function(root) {
    var BaseControl, ButtonControl, CheckableControl, ControlCollection, Factory, SelectControl, buildControlObject, each, filter, qs, qsa, slice;
    qs = document.querySelector.bind(document);
    qsa = document.querySelectorAll.bind(document);
    each = Function.prototype.call.bind(Array.prototype.forEach);
    slice = Function.prototype.call.bind(Array.prototype.slice);
    filter = Function.prototype.call.bind(Array.prototype.filter);
    BaseControl = (function() {
      function BaseControl(el) {
        this.el = el;
        this.id = el.id;
        this.listeners = [];
        this;
      }

      BaseControl.prototype.required = function(param) {
        if (param) {
          this.el.required = !!param;
          return this;
        } else {
          return this.el.required;
        }
      };

      BaseControl.prototype.disabled = function(param) {
        if (param) {
          this.el.disabled = !!param;
          return this;
        } else {
          return this.el.disabled;
        }
      };

      BaseControl.prototype.value = function(param) {
        if (param) {
          this.el.value = param;
          return this;
        } else {
          if (this.valid()) {
            return this.el.value;
          } else {

          }
        }
      };

      BaseControl.prototype.valid = function() {
        if (this.el.checkValidity) {
          return this.el.checkValidity();
        } else {
          return true;
        }
      };

      BaseControl.prototype.on = function(eventType, handler) {
        this.el.addEventListener(eventType, handler);
        return this;
      };

      BaseControl.prototype.off = function(handler) {
        this.el.removeEventListener(handler);
        return this;
      };

      BaseControl.prototype.trigger = function(eventType) {
        this.el.dispatchEvent(new CustomEvent(eventType));
        return this;
      };

      return BaseControl;

    })();
    CheckableControl = (function(_super) {
      __extends(CheckableControl, _super);

      function CheckableControl(el) {
        CheckableControl.__super__.constructor.call(this, el);
      }

      CheckableControl.prototype.value = function(param) {
        if (param) {
          this.el.value = param;
          return this;
        } else {
          if (this.el.checked) {
            return this.el.value;
          } else {
            return false;
          }
        }
      };

      return CheckableControl;

    })(BaseControl);
    SelectControl = (function(_super) {
      __extends(SelectControl, _super);

      function SelectControl(el) {
        SelectControl.__super__.constructor.call(this, el);
      }

      SelectControl.prototype.value = function() {
        var option;
        return (function() {
          var _i, _len, _ref, _results;
          _ref = this.selected();
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            option = _ref[_i];
            _results.push(option.value);
          }
          return _results;
        }).call(this);
      };

      SelectControl.prototype.selected = function() {
        var opts;
        opts = this.el.querySelectorAll("option");
        return filter(opts, function(opt) {
          return opt.selected && !opt.disabled;
        });
      };

      return SelectControl;

    })(BaseControl);
    ButtonControl = (function(_super) {
      __extends(ButtonControl, _super);

      function ButtonControl(el) {
        ButtonControl.__super__.constructor.call(this, el);
      }

      return ButtonControl;

    })(BaseControl);
    ControlCollection = (function(_super) {
      __extends(ControlCollection, _super);

      function ControlCollection(components, options) {
        var component, _i, _len;
        for (_i = 0, _len = components.length; _i < _len; _i++) {
          component = components[_i];
          this.push(component);
        }
        this.id = options.id;
      }

      ControlCollection.prototype.value = function() {
        var component, val, values, _i, _len;
        values = [];
        for (_i = 0, _len = this.length; _i < _len; _i++) {
          component = this[_i];
          val = component.value();
          if (val && val.length) {
            values.push({
              id: component.id,
              val: val
            });
          }
        }
        return values;
      };

      ControlCollection.prototype.valueHash = function() {
        var component, values, _i, _len;
        values = [];
        for (_i = 0, _len = this.length; _i < _len; _i++) {
          component = this[_i];
          values.push(component.value());
        }
        return values;
      };

      ControlCollection.prototype.disabled = function(param) {
        var component, results, _i, _len;
        results = {};
        for (_i = 0, _len = this.length; _i < _len; _i++) {
          component = this[_i];
          if (param) {
            component.disabled(param);
          }
          results[component.id] = component.disabled();
        }
        return results;
      };

      ControlCollection.prototype.required = function(param) {
        var component, results, _i, _len;
        results = {};
        for (_i = 0, _len = this.length; _i < _len; _i++) {
          component = this[_i];
          if (param) {
            component.required(param);
          }
          results[component.id] = component.required();
        }
        return results;
      };

      ControlCollection.prototype.on = function(eventType, handler) {
        var component, _i, _len;
        handler = handler.bind(this);
        for (_i = 0, _len = this.length; _i < _len; _i++) {
          component = this[_i];
          component.on(eventType, handler);
        }
        return this;
      };

      ControlCollection.prototype.off = function(handler) {
        var component, index, _i, _len;
        if ((index = this.listeners.indexOf(handler)) > -1) {
          this.listeners.splice(index, 1);
          for (_i = 0, _len = this.length; _i < _len; _i++) {
            component = this[_i];
            component.off(arguments);
          }
        }
        return this;
      };

      ControlCollection.prototype.trigger = function(eventType, handler) {
        var component, _i, _len;
        handler = handler.bind(this);
        for (_i = 0, _len = this.length; _i < _len; _i++) {
          component = this[_i];
          component.trigger(arguments);
        }
        return this;
      };

      ControlCollection.prototype.getComponentById = function(id) {
        var component, _i, _len;
        for (_i = 0, _len = this.length; _i < _len; _i++) {
          component = this[_i];
          if (component.id) {
            return component;
          }
        }
        return false;
      };

      return ControlCollection;

    })(Array);
    buildControlObject = function(el) {
      switch (el.tagName) {
        case "INPUT":
          if (el.type === "radio" || el.type === "checkbox") {
            return new CheckableControl(el);
          } else {
            return new BaseControl(el);
          }
          break;
        case "SELECT":
          return new SelectControl(el);
        case "BUTTON":
          return new ButtonControl(el);
      }
    };
    Factory = function(e, options) {
      var buildOptions, components, factoryInner, tagNames;
      components = [];
      tagNames = ["INPUT", "SELECT", "BUTTON"];
      factoryInner = function(elParam) {
        var els, _ref;
        console.log("inner started");
        console.log(elParam);
        if (elParam instanceof ControlCollection) {
          console.log("in ControlCollection");
          console.log(elParam);
          components.push(elParam);
          return;
        } else if (typeof elParam === "string") {
          console.log("in string");
          console.log(elParam);
          factoryInner(qsa(elParam));
          return;
        } else if (elParam instanceof Node && !(_ref = elParam.tagName, __indexOf.call(tagNames, _ref) >= 0)) {
          console.log("in other node");
          console.log(elParam);
          els = [];
          each(tagNames, function(name) {
            var group;
            console.log("Each tagName for:");
            console.log(name);
            group = elParam.getElementsByTagName(name);
            console.log(group);
            els = els.concat(group);
          });
          console.log("control children of otherNode");
          console.log(els);
          factoryInner(els);
          return;
        } else if (elParam instanceof Node) {
          console.log("in control node");
          console.log(elParam);
          components.push(buildControlObject(elParam));
          return;
        } else if (typeof elParam.length !== "undefined") {
          console.log("in length");
          console.log(elParam);
          each(elParam, function(item) {
            console.log("in each");
            console.log(item);
            factoryInner(item);
          });
          return;
        } else {
          console.log("FELL THROUGH!!!");
          console.log(elParam);
        }
      };
      factoryInner(e);
      options || (options = {});
      buildOptions = {};
      if (typeof e === "string") {
        buildOptions.id = e.substr(1);
      }
      return new ControlCollection(components, buildOptions);
    };
    Factory.identifyingAttribute = "id";
    return root.Controls = Factory;
  })((function() {
    if (typeof exports !== "undefined") {
      return exports;
    } else {
      return window;
    }
  })());

}).call(this);
