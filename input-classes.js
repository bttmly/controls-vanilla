// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  (function(root) {
    var Base, CheckableComponent, InputComponent, InputFactory, InputGroup, SelectComponent, camelize;
    camelize = function(str) {
      var camel;
      camel = str.replace(/(?:^|[-_ ])(\w)/g, function(_, c) {
        if (c) {
          return c.toUpperCase();
        } else {
          return "";
        }
      });
      return camel.charAt(0).toLowerCase() + camel.slice(1);
    };
    Base = (function() {
      function Base(el) {
        this.el = el;
        this.listeners = [];
        return this;
      }

      Base.prototype.value = function() {
        if (arguments.length) {
          return this._setValue(arguments);
        } else {
          if (this._hasValue() && this.validate()) {
            return this.el.value;
          } else {
            return false;
          }
        }
      };

      Base.prototype.values = function() {
        return this.value(arguments);
      };

      Base.prototype.validate = function() {
        return this.el.checkValidity();
      };

      Base.prototype.isFocused = function() {
        return document.activeElement === this.el;
      };

      Base.prototype._hasValue = function() {
        return !!this.el.value;
      };

      Base.prototype._setValue = function(value) {
        return (this.el.value = value);
      };

      Base.prototype._checkable = function() {
        return "checked" in this.el;
      };

      Base.prototype.addEventListener = function(type, listener, useCapture) {
        if (useCapture == null) {
          useCapture = false;
        }
        listener = listener.bind(this);
        this.el.addEventListener(type, listener, useCapture);
        return this.listeners.push({
          type: type,
          listener: listener
        });
      };

      Base.prototype.removeEventListener = function(type, listener, useCapture) {
        if (useCapture == null) {
          useCapture = false;
        }
        this.el.removeEventListener(type, listener, useCapture);
        return listener;
      };

      Base.prototype.dispatchEvent = function(event) {
        return this.el.dispatchEvent(event);
      };

      return Base;

    })();
    InputComponent = (function(_super) {
      __extends(InputComponent, _super);

      function InputComponent(el) {
        InputComponent.__super__.constructor.call(this, el);
      }

      return InputComponent;

    })(Base);
    CheckableComponent = (function(_super) {
      __extends(CheckableComponent, _super);

      function CheckableComponent(el) {
        CheckableComponent.__super__.constructor.call(this, el);
      }

      CheckableComponent.prototype.check = function() {
        return this._switch(true);
      };

      CheckableComponent.prototype.uncheck = function() {
        return this._switch(false);
      };

      CheckableComponent.prototype._switch = function(bool) {
        if (typeof bool === "undefined" || this.isChecked() !== bool) {
          this.el.checked = !this.el.checked;
          this._dispatchChange();
        }
        return this.isChecked();
      };

      CheckableComponent.prototype._dispatchChange = function() {
        return this.el.dispatchEvent(new Event("change"));
      };

      CheckableComponent.prototype.isChecked = function() {
        return this.el.checked;
      };

      CheckableComponent.prototype.value = function() {
        if (arguments.length) {
          return this._setValue(arguments);
        } else {
          if (this.isChecked()) {
            return CheckableComponent.__super__.value.call(this);
          } else {
            return false;
          }
        }
      };

      return CheckableComponent;

    })(Base);
    SelectComponent = (function(_super) {
      __extends(SelectComponent, _super);

      function SelectComponent(el) {
        SelectComponent.__super__.constructor.call(this, el);
      }

      SelectComponent.prototype.value = function() {
        var option;
        return (function() {
          var _i, _len, _ref, _results;
          _ref = this.selected();
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            option = _ref[_i];
            _results.push(option.value);
          }
          return _results;
        }).call(this);
      };

      SelectComponent.prototype.selected = function() {
        var options;
        options = this.el.querySelectorAll("option");
        return Array.prototype.filter.call(options, function(option) {
          return option.selected && !option.disabled;
        });
      };

      return SelectComponent;

    })(Base);
    InputGroup = (function() {
      function InputGroup(selector) {
        var i, node, nodeList, _i, _len;
        if (selector instanceof NodeList) {
          nodeList = selector;
        } else {
          nodeList = document.querySelectorAll(selector);
        }
        this.inputs = [];
        for (i = _i = 0, _len = nodeList.length; _i < _len; i = ++_i) {
          node = nodeList[i];
          this.inputs.push(InputFactory(nodeList.item(i)));
        }
        return this;
      }

      InputGroup.prototype.value = function() {
        var input, results, val;
        results = (function() {
          var _i, _len, _ref, _results;
          _ref = this.inputs;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            input = _ref[_i];
            if (val = input.value()) {
              _results.push(val);
            }
          }
          return _results;
        }).call(this);
        if (results.length) {
          return results;
        } else {
          return false;
        }
      };

      InputGroup.prototype.values = function() {
        return this.value(arguments);
      };

      InputGroup.prototype.hashValue = function() {
        var input, results, val, _i, _len, _ref;
        results = {};
        _ref = this.inputs;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          input = _ref[_i];
          val = input.value();
          if (val) {
            results[camelize(input.el.id)] = val;
          }
        }
        if (Object.keys(results).length) {
          return results;
        } else {
          return false;
        }
      };

      InputGroup.prototype.hashValues = function() {
        return this.hashValues(arguments);
      };

      InputGroup.prototype.addEventListener = function(type, listener, useCapture) {
        var input, _i, _len, _ref, _results;
        if (useCapture == null) {
          useCapture = false;
        }
        _ref = this.inputs;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          input = _ref[_i];
          _results.push(input.addEventListener(type, listener.bind(this), useCapture));
        }
        return _results;
      };

      InputGroup.prototype.inputById = function(id) {
        var input, _i, _len, _ref;
        if (id.charAt(0) === "#") {
          id = id.slice(1);
        }
        _ref = this.inputs;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          input = _ref[_i];
          if (input.id === id) {
            return input;
          }
        }
        return false;
      };

      InputGroup.prototype.check = function(param) {
        return this._changeCheck(true, param);
      };

      InputGroup.prototype.uncheck = function(param) {
        return this._changeCheck(false, param);
      };

      InputGroup.prototype._changeCheck = function(onOff, param) {
        var input, _i, _len, _ref, _results;
        if (typeof param === "undefined") {
          _ref = this.inputs;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            input = _ref[_i];
            if (input instanceof CheckableComponent) {
              _results.push(input[onOff ? "check" : "uncheck"]());
            }
          }
          return _results;
        } else if (typeof param === "number" && this.inputs[param] && this.inputs[param]._switch) {
          return this.inputs[param][onOff ? "check" : "uncheck"]();
        } else if (typeof param === "string") {
          if ((input = this.inputById(param))) {
            if (input instanceof CheckableComponent) {
              return input[onOff ? "check" : "f"];
            }
          }
        }
      };

      return InputGroup;

    })();
    InputFactory = function(el) {
      var classMatcher, constructor;
      classMatcher = {
        input: {
          radio: CheckableComponent,
          checkbox: CheckableComponent
        },
        select: SelectComponent
      };
      if (typeof el === "string") {
        el = document.querySelectorAll(el);
      }
      if (el.length > 1) {
        return new InputGroup(el);
      } else {
        if (el.item) {
          el = el.item(0);
        }
        switch (el.tagName.toLowerCase()) {
          case "input" || "textarea":
            constructor = classMatcher.input[el.type] || InputComponent;
            return new constructor(el);
          case "select":
            constructor = classMatcher.select;
            return new constructor(el);
          default:
            console.warn("Invalid element passed to InputFactory");
            return false;
        }
      }
    };
    return root.InputClasses = {
      Base: Base,
      InputComponent: InputComponent,
      SelectComponent: SelectComponent,
      CheckableComponent: CheckableComponent,
      InputGroup: InputGroup,
      InputFactory: InputFactory
    };
  })((function() {
    if (typeof exports !== "undefined") {
      return exports;
    } else {
      return window;
    }
  })());

}).call(this);
