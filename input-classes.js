// Generated by CoffeeScript 1.7.1
(function() {
  var CheckableComponent, InputBase, InputComponent, InputGroup, InputMaker, SelectComponent,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  InputBase = (function() {
    function InputBase(el) {
      this.el = el;
      return this;
    }

    InputBase.prototype.value = function() {
      if (arguments.length) {
        return this._setValue(arguments);
      } else {
        if (this._hasValue() && this.validate()) {
          return this.el.value;
        } else {
          return false;
        }
      }
    };

    InputBase.prototype.values = function() {
      return this.value(arguments);
    };

    InputBase.prototype.validate = function() {
      return true;
    };

    InputBase.prototype.isFocused = function() {
      return document.activeElement === this.el;
    };

    InputBase.prototype._hasValue = function() {
      return !!this.el.value;
    };

    InputBase.prototype._setValue = function(value) {
      return (this.el.value = value);
    };

    return InputBase;

  })();

  ["addEventListener", "dispatchEvent", "removeEventListener"].forEach(function(method) {
    return InputBase.prototype[method] = function() {
      return EventTarget.prototype[method].apply(this.el, arguments);
    };
  });

  InputComponent = (function(_super) {
    __extends(InputComponent, _super);

    function InputComponent(el) {
      InputComponent.__super__.constructor.call(this, el);
    }

    return InputComponent;

  })(InputBase);

  CheckableComponent = (function(_super) {
    __extends(CheckableComponent, _super);

    function CheckableComponent(el) {
      CheckableComponent.__super__.constructor.call(this, el);
    }

    CheckableComponent.prototype.checked = function() {
      return this.el.checked;
    };

    CheckableComponent.prototype.value = function() {
      if (arguments.length) {
        return this._setValue(arguments);
      } else {
        if (this.checked()) {
          return CheckableComponent.__super__.value.call(this);
        } else {
          return false;
        }
      }
    };

    CheckableComponent.prototype.toggle = function() {
      return this.checked = !this.checked;
    };

    return CheckableComponent;

  })(InputBase);

  SelectComponent = (function(_super) {
    __extends(SelectComponent, _super);

    function SelectComponent(el) {
      SelectComponent.__super__.constructor.call(this, el);
    }

    SelectComponent.prototype.value = function() {
      var option;
      return (function() {
        var _i, _len, _ref, _results;
        _ref = this.selected();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          option = _ref[_i];
          _results.push(option.value);
        }
        return _results;
      }).call(this);
    };

    SelectComponent.prototype.selected = function() {
      var options;
      options = this.el.querySelectorAll("option");
      return Array.prototype.filter.call(options, function(option) {
        return option.selected && !option.disabled;
      });
    };

    return SelectComponent;

  })(InputBase);

  window.InputGroup = InputGroup = (function() {
    function InputGroup(selector) {
      var i, node, nodeList, _i, _len;
      nodeList = document.querySelectorAll(selector);
      this.inputs = [];
      for (i = _i = 0, _len = nodeList.length; _i < _len; i = ++_i) {
        node = nodeList[i];
        this.inputs.push(InputMaker(nodeList.item(i)));
      }
      return this;
    }

    InputGroup.prototype.value = function() {
      var input, results, val, _i, _len, _ref;
      results = [];
      _ref = this.inputs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        input = _ref[_i];
        val = input.value();
        if (val) {
          results.push(val);
        }
      }
      return results;
    };

    InputGroup.prototype.values = function() {
      return this.value();
    };

    return InputGroup;

  })();

  window.InputMaker = InputMaker = (function() {
    var classMatcher;

    classMatcher = {
      input: {
        radio: CheckableComponent,
        checkbox: CheckableComponent
      },
      select: SelectComponent
    };

    function InputMaker(el) {
      var constructor;
      if (typeof el === "string") {
        el = document.querySelector(el);
      }
      switch (el.tagName.toLowerCase()) {
        case "input" || "textarea":
          constructor = classMatcher.input[el.type] || InputComponent;
          return new constructor(el);
        case "select":
          constructor = classMatcher.select;
          return new constructor(el);
        default:
          console.warn("Invalid element passed to InputMaker");
          return false;
      }
    }

    return InputMaker;

  })();

}).call(this);
